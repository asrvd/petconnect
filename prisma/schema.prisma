// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PetType {
  DOG
  CAT
  RABBIT
  HAMSTER
  OTHERS
}

enum PetGender {
  MALE
  FEMALE
}

enum AdoptionStatus {
  PENDING
  ADOPTED
}

model AdoptionPost {
  id               String            @id @default(cuid())
  description      String            @db.Text
  petType          PetType
  petName          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  status           AdoptionStatus    @default(PENDING)
  location         String
  lat              Float?
  lng              Float?
  userId           String            @map("user_id")
  contactPhone     String?
  contactEmail     String?
  photos           String[]
  adoptedBy        String?           @map("adopted_by")
  adoptionRequests AdoptionRequest[]
  conversations    Conversation[]
}

model AdoptionRequest {
  id                 String       @id @default(cuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  userId             String       @map("user_id")
  adoptionPostId     String       @map("adoption_post_id")
  message            String       @db.Text
  livingConditions   String       @db.Text
  experienceWithPets String       @db.Text
  adoptionPost       AdoptionPost @relation(fields: [adoptionPostId], references: [id])
}

model Conversation {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  users         String[]     @map("users")
  relatedPost   AdoptionPost @relation(fields: [relatedPostId], references: [id])
  relatedPostId String       @map("related_post_id")
  messages      Message[]
}

model Message {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  senderId       String       @map("sender_id")
  receiverId     String       @map("receiver_id")
  text           String       @db.Text
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @map("conversation_id")
}
